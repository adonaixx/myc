import nodeResolve from "@rollup/plugin-node-resolve";
{{#if features.binary}}
import terser from "@rollup/plugin-terser";
{{/if}}
import typescript from "@rollup/plugin-typescript";
import { createRequire } from "node:module";
import { resolve } from "node:path";
import { pathToFileURL } from "node:url";
import { resolveConfig } from "prettier";
import { defineConfig } from "rollup";
{{#if (or features.library features.types)}}
{{#if features.types}}
import dts from "rollup-plugin-dts";
{{/if}}
import prettier from "rollup-plugin-prettier";
{{/if}}

const require = createRequire(import.meta.url);
const pkg = require("./package.json");

const prettierrc = {
	parser: "typescript",
	...(await resolveConfig(pathToFileURL(resolve(process.cwd(), "./src/main.ts")), {
		config: "./../../.prettierrc.json",
		editorconfig: true,
	})),
};

export default defineConfig([
	{{#if features.binary}}
	{
		input: "./src/main.ts",
		output: {
			file: "./bin/{{kebabCase dropName}}.js",
			format: "esm",
			plugins: [
				terser({
					keep_classnames: true,
					keep_fnnames: true,
				})
			],
		},
		plugins: [nodeResolve(), typescript(), dts()],
		external: [
			Object.keys(pkg.dependencies ?? {}),
			Object.keys(pkg.peerDependencies ?? {}),
			/^@{{kebabCase scope}}\/.+$/,
		],
	},
	{{/if}}
	{{#if features.library}}
	{
		input: "./src/lib.ts",
		output: {
			file: "./build/{{kebabCase dropName}}.js",
			format: "esm",
			plugins: [prettier(prettierrc)],
		},
		plugins: [nodeResolve(), typescript()],
		external: [
			Object.keys(pkg.dependencies ?? {}),
			Object.keys(pkg.peerDependencies ?? {}),
			/^@{{kebabCase scope}}\/.+$/,
		],
	},
	{{/if}}
	{{#if features.types}}
	{
		input: "./src/lib.ts",
		output: {
			file: "./build/{{kebabCase dropName}}.d.ts",
			format: "esm",
			plugins: [prettier(prettierrc)],
		},
		plugins: [nodeResolve(), typescript(), dts()],
		external: [
			Object.keys(pkg.dependencies ?? {}),
			Object.keys(pkg.peerDependencies ?? {}),
			/^@{{kebabCase scope}}\/.+$/,
		],
	},
	{{/if}}
]);
